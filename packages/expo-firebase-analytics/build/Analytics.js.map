{"version":3,"file":"Analytics.js","sourceRoot":"","sources":["../src/Analytics.ts"],"names":[],"mappings":"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","sourcesContent":["import { UnavailabilityError } from '@unimodules/core';\n\nimport ExpoFirebaseAnalytics from './ExpoFirebaseAnalytics';\n\nimport parseConfig from './parseConfig';\n\nexport async function initAppAsync(config: { [key: string]: any }): Promise<void> {\n  // @ts-ignore\n  if (global.__DEV__ !== true) {\n    console.warn('initAppAsync should only be used in dev mode');\n  }\n  if (!ExpoFirebaseAnalytics.initAppAsync) {\n    throw new UnavailabilityError('expo-firebase-analytics', 'initAppAsync');\n  }\n  return await ExpoFirebaseAnalytics.initAppAsync(parseConfig(config));\n}\n\nexport async function deleteAppAsync(config: { [key: string]: any }): Promise<void> {\n  if (!ExpoFirebaseAnalytics.deleteAppAsync) {\n    throw new UnavailabilityError('expo-firebase-analytics', 'deleteAppAsync');\n  }\n  return await ExpoFirebaseAnalytics.deleteAppAsync(parseConfig(config));\n}\n\n/**\n * Logs an app event. The event can have up to 25 parameters. Events with the same name must have\n * the same parameters. Up to 500 event names are supported. Using predefined events and/or\n * parameters is recommended for optimal reporting.\n *\n * The following event names are reserved and cannot be used:\n * - `ad_activeview`\n * - `ad_click`\n * - `ad_exposure`\n * - `ad_impression`\n * - `ad_query`\n * - `adunit_exposure`\n * - `app_clear_data`\n * - `app_remove`\n * - `app_update`\n * - `error`\n * - `first_open`\n * - `in_app_purchase`\n * - `notification_dismiss`\n * - `notification_foreground`\n * - `notification_open`\n * - `notification_receive`\n * - `os_update`\n * - `screen_view`\n * - `session_start`\n * - `user_engagement`\n *\n * @param name The name of the event. Should contain 1 to 40 alphanumeric characters or\n *     underscores. The name must start with an alphabetic character. Some event names are\n *     reserved. The \"firebase_\",\n *     \"google_\", and \"ga_\" prefixes are reserved and should not be used. Note that event names are\n *     case-sensitive and that logging two events whose names differ only in case will result in\n *     two distinct events.\n * @param parameters The dictionary of event parameters. Passing `undefined` indicates that the event has\n *     no parameters. Parameter names can be up to 40 characters long and must start with an\n *     alphabetic character and contain only alphanumeric characters and underscores. Only `String`\n *     and `Number` (signed 64-bit integer and 64-bit floating-point number) parameter types are\n *     supported. `String` parameter values can be up to 100 characters long. The \"firebase_\",\n *     \"google_\", and \"ga_\" prefixes are reserved and should not be used for parameter names.\n */\nexport async function logEventAsync(\n  name: string,\n  properties?: { [key: string]: any }\n): Promise<void> {\n  if (!ExpoFirebaseAnalytics.logEventAsync) {\n    throw new UnavailabilityError('expo-firebase-analytics', 'logEventAsync');\n  }\n  return await ExpoFirebaseAnalytics.logEventAsync(name, properties);\n}\n\n/**\n * Sets whether analytics collection is enabled for this app on this device. This setting is\n * persisted across app sessions. By default it is enabled.\n *\n * @param analyticsCollectionEnabled A flag that enables or disables Analytics collection.\n */\nexport async function setAnalyticsCollectionEnabledAsync(\n  analyticsCollectionEnabled: boolean\n): Promise<void> {\n  if (!ExpoFirebaseAnalytics.setAnalyticsCollectionEnabledAsync) {\n    throw new UnavailabilityError('expo-firebase-analytics', 'setAnalyticsCollectionEnabledAsync');\n  }\n  return await ExpoFirebaseAnalytics.setAnalyticsCollectionEnabledAsync(analyticsCollectionEnabled);\n}\n\n/**\n * Sets the current screen name, which specifies the current visual context in your app. This helps\n * identify the areas in your app where users spend their time and how they interact with your app.\n * Must be called on the main thread.\n *\n * Note that screen reporting is enabled automatically and records the class name of the current\n * UIViewController for you without requiring you to call this method. If you implement\n * viewDidAppear in your UIViewController but do not call [super viewDidAppear:], that screen class\n * will not be automatically tracked. The class name can optionally be overridden by calling this\n * method in the viewDidAppear callback of your UIViewController and specifying the\n * screenClassOverride parameter. setScreenName:screenClass: must be called after\n * [super viewDidAppear:].\n *\n * If your app does not use a distinct UIViewController for each screen, you should call this\n * method and specify a distinct screenName each time a new screen is presented to the user.\n *\n * The screen name and screen class remain in effect until the current UIViewController changes or\n * a new call to setScreenName:screenClass: is made.\n *\n * @param screenName The name of the current screen. Should contain 1 to 100 characters. Set to `undefined`\n *     to clear the current screen name.\n * @param screenClassOverride The name of the screen class. Should contain 1 to 100 characters. By\n *     default this is the class name of the current UIViewController. Set to `undefined` to revert to the\n *     default class name.\n */\nexport async function setCurrentScreenAsync(\n  screenName?: string,\n  screenClassOverride?: string\n): Promise<void> {\n  if (!ExpoFirebaseAnalytics.setCurrentScreenAsync) {\n    throw new UnavailabilityError('expo-firebase-analytics', 'setCurrentScreenAsync');\n  }\n  return await ExpoFirebaseAnalytics.setCurrentScreenAsync(screenName, screenClassOverride);\n}\n\n/**\n * **Android only**\n *\n * @param millis\n */\nexport async function setMinimumSessionDurationAsync(millis: number): Promise<void> {\n  if (!ExpoFirebaseAnalytics.setMinimumSessionDurationAsync) {\n    throw new UnavailabilityError('expo-firebase-analytics', 'setMinimumSessionDurationAsync');\n  }\n  return await ExpoFirebaseAnalytics.setMinimumSessionDurationAsync(millis);\n}\n\n/**\n * Sets the interval of inactivity in seconds that terminates the current session. The default\n * value is 1800000 milliseconds (30 minutes).\n *\n * @param sessionTimeoutInterval The custom time of inactivity in milliseconds before the current\n *     session terminates.\n */\nexport async function setSessionTimeoutDurationAsync(\n  sessionTimeoutInterval: number\n): Promise<void> {\n  if (!ExpoFirebaseAnalytics.setSessionTimeoutDurationAsync) {\n    throw new UnavailabilityError('expo-firebase-analytics', 'setSessionTimeoutDurationAsync');\n  }\n  return await ExpoFirebaseAnalytics.setSessionTimeoutDurationAsync(sessionTimeoutInterval);\n}\n\n/**\n * Sets the user ID property. This feature must be used in accordance with\n * [Google's Privacy Policy](https://www.google.com/policies/privacy)\n *\n * @param userID The user ID to ascribe to the user of this app on this device, which must be\n *     non-empty and no more than 256 characters long. Setting userID to nil removes the user ID.\n */\nexport async function setUserIdAsync(userID: string): Promise<void> {\n  if (!ExpoFirebaseAnalytics.setUserIdAsync) {\n    throw new UnavailabilityError('expo-firebase-analytics', 'setUserIdAsync');\n  }\n  return await ExpoFirebaseAnalytics.setUserIdAsync(userID);\n}\n/**\n * Sets a user property to a given value. Up to 25 user property names are supported. Once set,\n * user property values persist throughout the app lifecycle and across sessions.\n *\n * The following user property names are reserved and cannot be used:\n *\n * - `first_open_time`\n * - `last_deep_link_referrer`\n * - `user_id`\n *\n * @param name The name of the user property to set. Should contain 1 to 24 alphanumeric characters\n *     or underscores and must start with an alphabetic character. The \"firebase_\", \"google_\", and\n *     \"ga_\" prefixes are reserved and should not be used for user property names.\n * @param value The value of the user property. Values can be up to 36 characters long. Setting the\n *     value to nil removes the user property.\n */\nexport async function setUserPropertyAsync(name: string, value: string): Promise<void> {\n  if (!ExpoFirebaseAnalytics.setUserPropertyAsync) {\n    throw new UnavailabilityError('expo-firebase-analytics', 'setUserPropertyAsync');\n  }\n  return await ExpoFirebaseAnalytics.setUserPropertyAsync(name, value);\n}\n/**\n * Clears all analytics data for this instance from the device and resets the app instance ID.\n */\nexport async function resetAnalyticsDataAsync(): Promise<void> {\n  if (!ExpoFirebaseAnalytics.resetAnalyticsDataAsync) {\n    throw new UnavailabilityError('expo-firebase-analytics', 'resetAnalyticsDataAsync');\n  }\n  return await ExpoFirebaseAnalytics.resetAnalyticsDataAsync();\n}\n"]}